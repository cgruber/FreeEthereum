/*
 * The MIT License (MIT)
 *
 * Copyright 2017 Alexander Orlov <alexander.orlov@loxal.net>. All rights reserved.
 * Copyright (c) [2016] [ <ether.camp> ]
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

import java.text.SimpleDateFormat

buildscript {
    ext.kotlin_version = '1.1.1'
    repositories {
        jcenter()
        maven { url 'http://repo.spring.io/plugins-release-local' }
    }
    dependencies {
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:3.0.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}


plugins {
    id 'application'
    id 'jacoco'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
    id 'com.github.kt3k.coveralls' version '2.6.3'
    id 'com.jfrog.bintray' version '1.0'
}

apply plugin: 'propdeps-maven'
apply plugin: 'kotlin'

sourceCompatibility = 1.8

mainClassName = 'org.ethereum.Start'
applicationDefaultJvmArgs = ["-server", "-Xss4m", "-Xmx2G", "-XX:-OmitStackTraceInFastThrow"]

if ( project.hasProperty('jvmArgs') ) {
    applicationDefaultJvmArgs = applicationDefaultJvmArgs + project.jvmArgs.split('\\s+').toList()
}
if (project.hasProperty("mainClass")) {
    mainClassName = mainClass
}

tasks.withType(JavaCompile){
    options.warnings = false
}

task runMorden (type: JavaExec) {
    main = mainClassName
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs = applicationDefaultJvmArgs + '-Dethereumj.conf.res=morden.conf'
}

task runRopsten (type: JavaExec) {
    main = mainClassName
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs = applicationDefaultJvmArgs + '-Dethereumj.conf.res=ropsten.conf'
}

task runTest (type: JavaExec) {
    main = mainClassName
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs = applicationDefaultJvmArgs + '-Dethereumj.conf.res=test.conf'
}

/**
 *  This is TCK test command line option,
 *  to run the test:
 *     gradle tckRun -PfilePath=[ file path]
 *      e.g: gradle tckRun -PfilePath=E:\temp\test-case.json
 */
task tckRun(type:JavaExec){

    if (project.hasProperty("filePath")) {
        args = ["filerun", "$filePath"]
        jvmArgs = ["-Xss4M"]
    }

    if (project.hasProperty("content")) {
        args = ["content", "$content"]
        jvmArgs = ["-Xss4M"]
    }

    main = "org.ethereum.tck.RunTck"
    classpath = sourceSets.test.runtimeClasspath
}



test {

    beforeTest { descriptor ->
        logger.lifecycle("Running test: ${descriptor}")
    }

    jvmArgs '-Xss4m', '-Xmx3G'

    testLogging {
        events "failed"
        exceptionFormat "short"
    }

    systemProperty "file.encoding", "UTF-8"
}

ext {
    slf4jVersion = '1.7.25'
    leveldbVersion = '0.9'
    scastleVersion = '1.53.0.0'
    springVersion = '4.3.7.RELEASE'
    junitVersion = '4.12'
}

dependencies {
    compile "io.netty:netty-all:4.0.38.Final"
    compile "com.madgag.spongycastle:core:${scastleVersion}" // for SHA3 and SECP256K1
    compile "com.madgag.spongycastle:prov:${scastleVersion}" // for SHA3 and SECP256K1

    compile "org.iq80.leveldb:leveldb:${leveldbVersion}"     // Java API wrapper around native components

    compile "org.ethereum:leveldbjni-all:1.18.3"             // native leveldb components

    compile "org.ethereum:solcJ-all:0.4.8"                   // Solidity Compiler win/mac/linux binaries

    compile "com.cedarsoftware:java-util:1.26.0" // for deep equals
    compile "org.javassist:javassist:3.22.0-CR1"
    compile "org.slf4j:slf4j-api:${slf4jVersion}"
    compile "ch.qos.logback:logback-classic:1.2.2"
    compile "org.codehaus.jackson:jackson-mapper-asl:1.9.13"
    compile "com.google.code.findbugs:jsr305:3.0.1"
    compile "com.fasterxml.jackson.core:jackson-databind:2.9.0.pr2"
    compile "org.apache.commons:commons-collections4:4.1"
    compile "org.apache.commons:commons-lang3:3.5"
    compile "commons-codec:commons-codec:1.10"
    compile "org.springframework:spring-context:${springVersion}"
    compile "org.springframework:spring-tx:${springVersion}"
    compile "org.springframework:spring-orm:${springVersion}"
    compile "com.typesafe:config:1.2.1"
    compile "com.googlecode.concurrent-locks:concurrent-locks:1.0.0"

    compile("com.googlecode.json-simple:json-simple:1.1.1") {
        exclude group: 'junit', module: 'junit'
    }

    // used to hide spring initialization logs messages in samples
    optional "org.slf4j:jcl-over-slf4j:${slf4jVersion}"

    testCompile "junit:junit:${junitVersion}"
    testCompile "org.springframework:spring-test:${springVersion}"
    testCompile "org.mockito:mockito-core:2.7.20"
    testCompile "com.github.briandilley.jsonrpc4j:jsonrpc4j:1.5.0"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
}

repositories {
    mavenCentral()
}

static def gitCommitHash() {
    def process = "git rev-parse --short HEAD".execute()
    return process.text.trim()
 }

static def buildTime() {
    def df = new SimpleDateFormat("[dd/MMM/yyyy]-[HH:mm]")
    df.setTimeZone(TimeZone.getTimeZone("GMT"))
    return '[GMT]-' + df.format(new Date())
}

static def gitCurBranch() {
    def branchName = System.getenv('TRAVIS_BRANCH')
    if (branchName) return branchName
    def process = "git rev-parse --abbrev-ref HEAD".execute()
    return process.text.trim()
}

